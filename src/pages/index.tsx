import {
  SignIn,
  SignInButton,
  SignOutButton,
  useClerk,
  useUser,
  SignedIn,
  SignedOut,
} from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { useState } from "react";

dayjs.extend(relativeTime);

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();
  if (postsLoading) return <LoadingPage size={45} />;

  if (!data) return <div>Something went wrong ðŸ˜’</div>;

  return (
    <div className="flex max-h-[85vh] flex-col gap-8 overflow-y-scroll p-4">
      {[...data].map((postWithUser) => (
        <PostView {...postWithUser} key={postWithUser.post.id}></PostView>
      ))}
    </div>
  );
};

const CreatePost = () => {
  const { user, isLoaded: userLoaded } = useUser();
  if (!user || !userLoaded) return <LoadingPage />;
  const [userInput, setUserInput] = useState("");
  const ctx = api.useContext();
  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setUserInput("");
      void ctx.posts.getAll.invalidate();
    },
  });
  return (
    <div className="flex w-full items-center gap-14">
      <input
        type="text"
        className="grow  border-b-2 border-zinc-800 bg-transparent  p-2 focus:outline-none"
        placeholder="Type some emojis"
        value={userInput}
        onChange={(e) => setUserInput(e.target.value)}
        disabled={isPosting}
      />
      <button
        type="button"
        className="flex items-center rounded-lg bg-gradient-to-r from-teal-500 via-teal-600 to-teal-700 px-5 py-2 text-center text-base font-bold text-white hover:bg-gradient-to-br focus:outline-none focus:ring-4 focus:ring-teal-300 dark:focus:ring-teal-800"
        onClick={() => mutate({ content: userInput })}
      >
        {isPosting && <LoadingSpinner size={16}></LoadingSpinner>}
        Post
      </button>
      <Image
        src={user.profileImageUrl}
        alt="User profile picture"
        className="h-12 w-12 rounded-full"
        width={48}
        height={48}
      />
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

// TODO ADD ALT FOR IMAGES
const PostView = (props: PostWithUser) => {
  const { post, author } = props;
  return (
    <div className="flex flex-row gap-5">
      <Image
        src={author.profileImageUrl}
        alt="user profile picture"
        className="h-9 w-9 rounded-full"
        width={36}
        height={36}
      />
      <div key={post.id} className="flex flex-col">
        <div className="flex flex-row gap-1 text-sm xs:text-base">
          <span>{author?.username ? author.username : author.fullname}</span>
          <span className="font-thin text-zinc-300">
            {`Â· ${dayjs(post.createdAt).fromNow()}`}
          </span>
        </div>
        <span className="text-2xl">{post.content}</span>
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  // start fetching first
  api.posts.getAll.useQuery();
  return (
    <>
      <Head>
        <title>CheepðŸ¦©</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <SignedIn>
        <header className="p-2">
          <div className="container mx-auto flex  flex-row items-center justify-between gap-14 py-5">
            <span className="hidden whitespace-nowrap text-xl md:block">
              CheepðŸ¦©
            </span>
            <CreatePost></CreatePost>
          </div>
        </header>
      </SignedIn>
      <main className="overflow-none">
        <div className="h-full w-full">
          <SignedOut>
            <div>
              {" "}
              <SignInButton mode="modal">
                <div className="flex items-center justify-end py-4">
                  <button
                    type="button"
                    className="rounded-lg border border-gray-300 bg-white px-5 py-2.5 text-sm font-medium text-gray-900 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:border-gray-600 dark:bg-gray-800 dark:text-white dark:hover:border-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-700"
                  >
                    Sign in
                  </button>
                </div>
              </SignInButton>
            </div>
          </SignedOut>
          <Feed></Feed>
        </div>
      </main>
    </>
  );
};

export default Home;
